//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TherapistAPI
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class therapistEntities : DbContext
    {
        public therapistEntities()
            : base("name=therapistEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<BookingSer> BookingSers { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<ECHBen> ECHBens { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Therapist> Therapists { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<PatientBooking> PatientBookings { get; set; }
        public virtual DbSet<TherapistCalender> TherapistCalenders { get; set; }
    
        [DbFunction("therapistEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[therapistEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual int SP_ApproveBooking(Nullable<int> bookingID, Nullable<int> therapistID)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ApproveBooking", bookingIDParameter, therapistIDParameter);
        }
    
        public virtual int SP_ApproveCancelBooking(Nullable<int> patientBookingID, Nullable<int> therapistID, string status)
        {
            var patientBookingIDParameter = patientBookingID.HasValue ?
                new ObjectParameter("PatientBookingID", patientBookingID) :
                new ObjectParameter("PatientBookingID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ApproveCancelBooking", patientBookingIDParameter, therapistIDParameter, statusParameter);
        }
    
        public virtual int SP_ApproveUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ApproveUser", userIdParameter);
        }
    
        public virtual int SP_ChangePassword(Nullable<int> userId, string oldPassword, string newPassword)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ChangePassword", userIdParameter, oldPasswordParameter, newPasswordParameter);
        }
    
        public virtual int SP_CompleteBooking(Nullable<int> patientBookingID, string status)
        {
            var patientBookingIDParameter = patientBookingID.HasValue ?
                new ObjectParameter("PatientBookingID", patientBookingID) :
                new ObjectParameter("PatientBookingID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CompleteBooking", patientBookingIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<SP_GetAllServices_Result> SP_GetAllServices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllServices_Result>("SP_GetAllServices");
        }
    
        public virtual ObjectResult<SP_GetAllUsers_Result> SP_GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllUsers_Result>("SP_GetAllUsers");
        }
    
        public virtual ObjectResult<SP_GetBooking_Result> SP_GetBooking(Nullable<int> userId, Nullable<int> bookingID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBooking_Result>("SP_GetBooking", userIdParameter, bookingIDParameter);
        }
    
        public virtual int SP_GetBookingList(Nullable<int> userId, Nullable<int> refType, Nullable<int> refID, string status, string therapistName, string patientName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var refTypeParameter = refType.HasValue ?
                new ObjectParameter("RefType", refType) :
                new ObjectParameter("RefType", typeof(int));
    
            var refIDParameter = refID.HasValue ?
                new ObjectParameter("RefID", refID) :
                new ObjectParameter("RefID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var therapistNameParameter = therapistName != null ?
                new ObjectParameter("TherapistName", therapistName) :
                new ObjectParameter("TherapistName", typeof(string));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetBookingList", userIdParameter, refTypeParameter, refIDParameter, statusParameter, therapistNameParameter, patientNameParameter);
        }
    
        public virtual ObjectResult<SP_GetDashboard_Result> SP_GetDashboard(Nullable<int> userId, Nullable<int> refType, Nullable<int> refID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var refTypeParameter = refType.HasValue ?
                new ObjectParameter("RefType", refType) :
                new ObjectParameter("RefType", typeof(int));
    
            var refIDParameter = refID.HasValue ?
                new ObjectParameter("RefID", refID) :
                new ObjectParameter("RefID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDashboard_Result>("SP_GetDashboard", userIdParameter, refTypeParameter, refIDParameter);
        }
    
        public virtual ObjectResult<SP_GetUserDetails_Result> SP_GetUserDetails(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserDetails_Result>("SP_GetUserDetails", userIdParameter);
        }
    
        public virtual ObjectResult<SP_GetUserInfo_Result> SP_GetUserInfo(Nullable<int> userId, Nullable<int> bookingID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserInfo_Result>("SP_GetUserInfo", userIdParameter, bookingIDParameter);
        }
    
        public virtual int SP_Register(string firstName, string lastName, string email, string password, string phone, Nullable<int> refType, string insuranceNo, Nullable<int> age, Nullable<System.DateTime> dOB, Nullable<System.DateTime> expDate, string addrLine1, string addrLine2, string city, string state, string country, string postalCode, string serviceID, string bankDetail, string skill, string registrationNo, string serviceArea, Nullable<bool> monday, Nullable<bool> tuesday, Nullable<bool> wednesday, Nullable<bool> thursday, Nullable<bool> friday, Nullable<bool> saturday, Nullable<bool> sunday, string fromTime, string toTime, string gender, ObjectParameter id)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var refTypeParameter = refType.HasValue ?
                new ObjectParameter("RefType", refType) :
                new ObjectParameter("RefType", typeof(int));
    
            var insuranceNoParameter = insuranceNo != null ?
                new ObjectParameter("InsuranceNo", insuranceNo) :
                new ObjectParameter("InsuranceNo", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var addrLine1Parameter = addrLine1 != null ?
                new ObjectParameter("AddrLine1", addrLine1) :
                new ObjectParameter("AddrLine1", typeof(string));
    
            var addrLine2Parameter = addrLine2 != null ?
                new ObjectParameter("AddrLine2", addrLine2) :
                new ObjectParameter("AddrLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var serviceIDParameter = serviceID != null ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(string));
    
            var bankDetailParameter = bankDetail != null ?
                new ObjectParameter("BankDetail", bankDetail) :
                new ObjectParameter("BankDetail", typeof(string));
    
            var skillParameter = skill != null ?
                new ObjectParameter("Skill", skill) :
                new ObjectParameter("Skill", typeof(string));
    
            var registrationNoParameter = registrationNo != null ?
                new ObjectParameter("RegistrationNo", registrationNo) :
                new ObjectParameter("RegistrationNo", typeof(string));
    
            var serviceAreaParameter = serviceArea != null ?
                new ObjectParameter("ServiceArea", serviceArea) :
                new ObjectParameter("ServiceArea", typeof(string));
    
            var mondayParameter = monday.HasValue ?
                new ObjectParameter("Monday", monday) :
                new ObjectParameter("Monday", typeof(bool));
    
            var tuesdayParameter = tuesday.HasValue ?
                new ObjectParameter("Tuesday", tuesday) :
                new ObjectParameter("Tuesday", typeof(bool));
    
            var wednesdayParameter = wednesday.HasValue ?
                new ObjectParameter("Wednesday", wednesday) :
                new ObjectParameter("Wednesday", typeof(bool));
    
            var thursdayParameter = thursday.HasValue ?
                new ObjectParameter("Thursday", thursday) :
                new ObjectParameter("Thursday", typeof(bool));
    
            var fridayParameter = friday.HasValue ?
                new ObjectParameter("Friday", friday) :
                new ObjectParameter("Friday", typeof(bool));
    
            var saturdayParameter = saturday.HasValue ?
                new ObjectParameter("Saturday", saturday) :
                new ObjectParameter("Saturday", typeof(bool));
    
            var sundayParameter = sunday.HasValue ?
                new ObjectParameter("Sunday", sunday) :
                new ObjectParameter("Sunday", typeof(bool));
    
            var fromTimeParameter = fromTime != null ?
                new ObjectParameter("FromTime", fromTime) :
                new ObjectParameter("FromTime", typeof(string));
    
            var toTimeParameter = toTime != null ?
                new ObjectParameter("ToTime", toTime) :
                new ObjectParameter("ToTime", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Register", firstNameParameter, lastNameParameter, emailParameter, passwordParameter, phoneParameter, refTypeParameter, insuranceNoParameter, ageParameter, dOBParameter, expDateParameter, addrLine1Parameter, addrLine2Parameter, cityParameter, stateParameter, countryParameter, postalCodeParameter, serviceIDParameter, bankDetailParameter, skillParameter, registrationNoParameter, serviceAreaParameter, mondayParameter, tuesdayParameter, wednesdayParameter, thursdayParameter, fridayParameter, saturdayParameter, sundayParameter, fromTimeParameter, toTimeParameter, genderParameter, id);
        }
    
        public virtual int SP_SaveBooking(Nullable<int> patientID, Nullable<int> therapistID, Nullable<int> enteredBy, string patientName, Nullable<System.DateTime> dOB, string insuranceComp, string policyNo, string iDNo, string year, Nullable<System.DateTime> plicyDOB, string relPat, string assBen, string bookingSerXML, Nullable<bool> isInvOtherHelthCare, string eCHBenXML, Nullable<int> bookingID, ObjectParameter identity)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("PatientID", patientID) :
                new ObjectParameter("PatientID", typeof(int));
    
            var therapistIDParameter = therapistID.HasValue ?
                new ObjectParameter("TherapistID", therapistID) :
                new ObjectParameter("TherapistID", typeof(int));
    
            var enteredByParameter = enteredBy.HasValue ?
                new ObjectParameter("EnteredBy", enteredBy) :
                new ObjectParameter("EnteredBy", typeof(int));
    
            var patientNameParameter = patientName != null ?
                new ObjectParameter("PatientName", patientName) :
                new ObjectParameter("PatientName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var insuranceCompParameter = insuranceComp != null ?
                new ObjectParameter("InsuranceComp", insuranceComp) :
                new ObjectParameter("InsuranceComp", typeof(string));
    
            var policyNoParameter = policyNo != null ?
                new ObjectParameter("PolicyNo", policyNo) :
                new ObjectParameter("PolicyNo", typeof(string));
    
            var iDNoParameter = iDNo != null ?
                new ObjectParameter("IDNo", iDNo) :
                new ObjectParameter("IDNo", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var plicyDOBParameter = plicyDOB.HasValue ?
                new ObjectParameter("PlicyDOB", plicyDOB) :
                new ObjectParameter("PlicyDOB", typeof(System.DateTime));
    
            var relPatParameter = relPat != null ?
                new ObjectParameter("RelPat", relPat) :
                new ObjectParameter("RelPat", typeof(string));
    
            var assBenParameter = assBen != null ?
                new ObjectParameter("AssBen", assBen) :
                new ObjectParameter("AssBen", typeof(string));
    
            var bookingSerXMLParameter = bookingSerXML != null ?
                new ObjectParameter("BookingSerXML", bookingSerXML) :
                new ObjectParameter("BookingSerXML", typeof(string));
    
            var isInvOtherHelthCareParameter = isInvOtherHelthCare.HasValue ?
                new ObjectParameter("IsInvOtherHelthCare", isInvOtherHelthCare) :
                new ObjectParameter("IsInvOtherHelthCare", typeof(bool));
    
            var eCHBenXMLParameter = eCHBenXML != null ?
                new ObjectParameter("ECHBenXML", eCHBenXML) :
                new ObjectParameter("ECHBenXML", typeof(string));
    
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SaveBooking", patientIDParameter, therapistIDParameter, enteredByParameter, patientNameParameter, dOBParameter, insuranceCompParameter, policyNoParameter, iDNoParameter, yearParameter, plicyDOBParameter, relPatParameter, assBenParameter, bookingSerXMLParameter, isInvOtherHelthCareParameter, eCHBenXMLParameter, bookingIDParameter, identity);
        }
    
        public virtual int SP_TransDocument(Nullable<int> refId, Nullable<int> refType, string docPath, string docName, string mimeType, string fileContent)
        {
            var refIdParameter = refId.HasValue ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(int));
    
            var refTypeParameter = refType.HasValue ?
                new ObjectParameter("RefType", refType) :
                new ObjectParameter("RefType", typeof(int));
    
            var docPathParameter = docPath != null ?
                new ObjectParameter("DocPath", docPath) :
                new ObjectParameter("DocPath", typeof(string));
    
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var mimeTypeParameter = mimeType != null ?
                new ObjectParameter("MimeType", mimeType) :
                new ObjectParameter("MimeType", typeof(string));
    
            var fileContentParameter = fileContent != null ?
                new ObjectParameter("FileContent", fileContent) :
                new ObjectParameter("FileContent", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_TransDocument", refIdParameter, refTypeParameter, docPathParameter, docNameParameter, mimeTypeParameter, fileContentParameter);
        }
    
        public virtual int SP_UpdateProfile(Nullable<int> userId, Nullable<int> refID, string firstName, string lastName, string email, string phone, Nullable<int> refType, string insuranceNo, Nullable<int> age, Nullable<System.DateTime> dOB, Nullable<System.DateTime> expDate, string addrLine1, string addrLine2, string city, string state, string country, string serviceID, string bankDetail, string skill, string serviceArea, Nullable<bool> monday, Nullable<bool> tuesday, Nullable<bool> wednesday, Nullable<bool> thursday, Nullable<bool> friday, Nullable<bool> saturday, Nullable<bool> sunday, string fromTime, string toTime, string gender)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var refIDParameter = refID.HasValue ?
                new ObjectParameter("RefID", refID) :
                new ObjectParameter("RefID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var refTypeParameter = refType.HasValue ?
                new ObjectParameter("RefType", refType) :
                new ObjectParameter("RefType", typeof(int));
    
            var insuranceNoParameter = insuranceNo != null ?
                new ObjectParameter("InsuranceNo", insuranceNo) :
                new ObjectParameter("InsuranceNo", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var expDateParameter = expDate.HasValue ?
                new ObjectParameter("ExpDate", expDate) :
                new ObjectParameter("ExpDate", typeof(System.DateTime));
    
            var addrLine1Parameter = addrLine1 != null ?
                new ObjectParameter("AddrLine1", addrLine1) :
                new ObjectParameter("AddrLine1", typeof(string));
    
            var addrLine2Parameter = addrLine2 != null ?
                new ObjectParameter("AddrLine2", addrLine2) :
                new ObjectParameter("AddrLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var serviceIDParameter = serviceID != null ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(string));
    
            var bankDetailParameter = bankDetail != null ?
                new ObjectParameter("BankDetail", bankDetail) :
                new ObjectParameter("BankDetail", typeof(string));
    
            var skillParameter = skill != null ?
                new ObjectParameter("Skill", skill) :
                new ObjectParameter("Skill", typeof(string));
    
            var serviceAreaParameter = serviceArea != null ?
                new ObjectParameter("ServiceArea", serviceArea) :
                new ObjectParameter("ServiceArea", typeof(string));
    
            var mondayParameter = monday.HasValue ?
                new ObjectParameter("Monday", monday) :
                new ObjectParameter("Monday", typeof(bool));
    
            var tuesdayParameter = tuesday.HasValue ?
                new ObjectParameter("Tuesday", tuesday) :
                new ObjectParameter("Tuesday", typeof(bool));
    
            var wednesdayParameter = wednesday.HasValue ?
                new ObjectParameter("Wednesday", wednesday) :
                new ObjectParameter("Wednesday", typeof(bool));
    
            var thursdayParameter = thursday.HasValue ?
                new ObjectParameter("Thursday", thursday) :
                new ObjectParameter("Thursday", typeof(bool));
    
            var fridayParameter = friday.HasValue ?
                new ObjectParameter("Friday", friday) :
                new ObjectParameter("Friday", typeof(bool));
    
            var saturdayParameter = saturday.HasValue ?
                new ObjectParameter("Saturday", saturday) :
                new ObjectParameter("Saturday", typeof(bool));
    
            var sundayParameter = sunday.HasValue ?
                new ObjectParameter("Sunday", sunday) :
                new ObjectParameter("Sunday", typeof(bool));
    
            var fromTimeParameter = fromTime != null ?
                new ObjectParameter("FromTime", fromTime) :
                new ObjectParameter("FromTime", typeof(string));
    
            var toTimeParameter = toTime != null ?
                new ObjectParameter("ToTime", toTime) :
                new ObjectParameter("ToTime", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateProfile", userIdParameter, refIDParameter, firstNameParameter, lastNameParameter, emailParameter, phoneParameter, refTypeParameter, insuranceNoParameter, ageParameter, dOBParameter, expDateParameter, addrLine1Parameter, addrLine2Parameter, cityParameter, stateParameter, countryParameter, serviceIDParameter, bankDetailParameter, skillParameter, serviceAreaParameter, mondayParameter, tuesdayParameter, wednesdayParameter, thursdayParameter, fridayParameter, saturdayParameter, sundayParameter, fromTimeParameter, toTimeParameter, genderParameter);
        }
    
        public virtual ObjectResult<SP_UserLogin_Result> SP_UserLogin(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UserLogin_Result>("SP_UserLogin", emailIdParameter, passwordParameter);
        }
    }
}
